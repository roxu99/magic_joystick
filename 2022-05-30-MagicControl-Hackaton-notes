

- Emulation du JSM complet:
	On peut mettre 2 JSM légitimes sur le fauteuil et faire un setup, puis enregistrer les trames d'init de l'un des 2 JSM et les rejouer via le raspi.
	Ensuite on a le setup classique JSM légitime + JSM émulé par la raspi
	=> A tester
	
	
- Controle des verrins:
	Deux modes 
	- Un mode ou on met le power module en mode verrin et les trames de position XY controle les verrins
	- Un mode ou on a des trames UP / et DOWN spécifiques à chaque verrin => Plus simple à implémenter pour nous
	
- Amélioration sur le Joy:
	Watchdog à la publication

	Modification de l'archi joy: ne pas envoyer les trames joy à la place du JSM mais 
	modifier les trames du JS à la volée. Permet de gérer les erreures de cable, ou de frein



Objectif N°1 : Capture des trames de controle des verrins:

	1- Capture de trames entre HMC et Power Module
		Utilisation de "python RnetIntercept.py --dual --logfile TestVerrins2.txt"
	
	On Lance l'interception puis on balaye sur l'interface le contrôle de tous les actionneurs. 
	on a donc :
		Period  : Envoie des trames de verrins toutes les 50ms
		Type    : type de la trame 0x808 = ACTUATOR_CTRL
		Subtype : Identifiant de la terminaison, propre à chaque fauteuil	
										  Type      Subtype
		1- Baisse l'assise				  0x808	-	0x300		DATA: b'8000000000000000' - RAW: b'00030888010000008000000000000000' (idl=True, rtr=False)
		2- Remonte l'assise				  0x808	-	0x300		DATA: b'0000000000000000' - RAW: b'00030888010000000000000000000000' (idl=True, rtr=False)
		3- Baisse dossier				  0x808	-	0x300		DATA: b'8100000000000000' - RAW: b'00030888010000008100000000000000' (idl=True, rtr=False)
		4- Monte dossier				  0x808	-	0x300		DATA: b'0100000000000000' - RAW: b'00030888010000000100000000000000' (idl=True, rtr=False)
		5- Pivot arrière assise			  0x808	-	0x300		DATA: b'8200000000000000' - RAW: b'00030888010000008200000000000000' (idl=True, rtr=False)
		6- Pivot avant assise			  0x808	-	0x300		DATA: b'0200000000000000' - RAW: b'00030888010000000200000000000000' (idl=True, rtr=False)
		7- Baisse jambes				  0x808	-	0x300		DATA: b'8300000000000000' - RAW: b'00030888010000008300000000000000' (idl=True, rtr=False)
		8- Monte jambes					  0x808	-	0x300		DATA: b'0300000000000000' - RAW: b'00030888010000000300000000000000' (idl=True, rtr=False)
		9- ?							  0x808	-	0x300		DATA: b'8400000000000000' - RAW: b'00030888010000008400000000000000' (idl=True, rtr=False)
		10- Allonge - Actions combinées:  0x808	-	0x300		DATA: b'0400000000000000' - RAW: b'00030888010000000400000000000000' (idl=True, rtr=False)
			Baisse l'assise + Monte jambes + Baisse dossier
		11- ?							  0x808	-	0x300		DATA: b'8500000000000000' - RAW: b'00030888010000008500000000000000' (idl=True, rtr=False)
		12- ?							  0x808	-	0x300		DATA: b'0500000000000000' - RAW: b'00030888010000000500000000000000' (idl=True, rtr=False)
		

Objectif N°2 : Capture des trames de controle de la signalisation (phares, ...):




Objectif N°3 : Rejeu des 2 séquences d'init d'un JSM (Normal et sablier)
